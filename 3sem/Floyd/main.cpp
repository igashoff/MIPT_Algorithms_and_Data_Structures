//
//  main.cpp
//  Floyd
//
//  Created by Igashov_Ilya on 02.10.16.
//  Copyright (c) 2016 Igashov_Ilya. All rights reserved.
//


// –ü–æ–ª–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ –∑–∞–¥–∞–Ω –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ç—Ä–∏—Ü—É
// –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π –º–µ–∂–¥—É –µ–≥–æ –≤–µ—Ä—à–∏–Ω–∞–º–∏.
// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –≥—Ä–∞—Ñ–µ –Ω–µ—Ç —Ü–∏–∫–ª–æ–≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞.
 
// –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
// –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∏—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ùëÅ (1 <= ùëÅ <= 100) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞. –í
// —Å–ª–µ–¥—É—é—â–∏—Ö ùëÅ —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ ùëÅ —á–∏—Å–µ–ª –∑–∞–¥–∞–µ—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞ (ùëó-–æ–µ —á–∏—Å–ª–æ –≤ ùëñ-–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî
// –≤–µ—Å —Ä–µ–±—Ä–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã ùëñ –≤ –≤–µ—Ä—à–∏–Ω—É ùëó). –í—Å–µ —á–∏—Å–ª–∞ –ø–æ –º–æ–¥—É–ª—é –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç 100. –ù–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
// –º–∞—Ç—Ä–∏—Ü—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω—É–ª–∏.
 
// –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
// –í—ã–≤–µ–¥–∏—Ç–µ ùëÅ —Å—Ç—Ä–æ–∫ –ø–æ ùëÅ —á–∏—Å–µ–ª ‚Äî –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω, –≥–¥–µ ùëó-–æ–µ —á–∏—Å–ª–æ –≤
// ùëñ-–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–∞–≤–Ω–æ –≤–µ—Å—É –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã ùëñ –≤ ùëó.


#include <iostream>
#include <vector>

// –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∞–ª–≥–æ—Ä–∏—Ç–º –§–ª–æ–π–¥–∞. –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞
// –∏ –∏–∑–º–µ–Ω—è–µ—Ç –µ–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
void Floyd( std::vector<std::vector<int>>& matrix );

int main()
{
    int size = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞ (—Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏).
    FILE* f = fopen( "floyd.in", "r" );
    fscanf( f, "%d", &size );
    
    std::vector<std::vector<int>> matrix( size ); // –ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞.
    for( int i = 0; i < size; ++i ) {
        matrix[i].resize( size );
        for( int j = 0; j < size; ++j ) {
            int weight = 0;
            fscanf( f, "%d", &weight );
            matrix[i].push_back( weight );
        }
    }
    fclose( f );
    
    // –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞—Ç—á–∞–π—à–∏–µ –ø—É—Ç–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏ –ø–æ–ª–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
    Floyd( matrix );
    
    // –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã —Å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –≤ –Ω–µ–µ –∫—Ä–∞—Ç—á–∞–π—à–∏–º–∏ –ø—É—Ç—è–º–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏ –≥—Ä–∞—Ñ–∞.
    f = fopen( "floyd.out", "w" );
    for( int i = 0; i < size; ++i ) {
        for( int j = 0; j < size; ++j ) {
            fprintf( f, "%d ", matrix[i][j] );
        }
        fprintf( f, "\n" );
    }
    fclose( f );
    
    return 0;
}

// –î–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã i –≥—Ä–∞—Ñ–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ –ø–∞—Ä—ã –≤–µ—Ä—à–∏–Ω (u,v) –≥—Ä–∞—Ñ–∞, –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≤–µ—Ä—à–∏–Ω –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è:
// –ó–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–∏ –æ—Ç u –∫ v —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –¥–ª–∏–Ω–æ–π –ø—É—Ç–∏ –æ—Ç u –∫ v —á–µ—Ä–µ–∑ –≤–µ—Ä—à–∏–Ω—É i.
// –ï—Å–ª–∏ –ø—É—Ç—å —á–µ—Ä–µ–∑ i –æ–∫–∞–∑–∞–ª—Å—è –∫–æ—Ä–æ—á–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –≤ matrix[u][v],
// —Ç–æ –≤ matrix[u][v] –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏ –æ—Ç u –∫ v —á–µ—Ä–µ–∑ i.
void Floyd( std::vector<std::vector<int>>& matrix )
{
    for( int i = 0; i < matrix.size(); ++i ) {
        for( int u = 0; u < matrix.size(); ++u ) {
            for( int v = 0; v < matrix.size(); ++v ) {
                matrix[u][v] = std::min( matrix[u][v], matrix[u][i] + matrix[i][v] );
            }
        }
    }
}
