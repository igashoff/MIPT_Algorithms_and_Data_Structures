//
//  main.cpp
//  Prim_Algorithm
//
//  Created by Igashov_Ilya on 01.11.16.
//  Copyright (c) 2016 Igashov_Ilya. All rights reserved.
//

//  –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω
//  –∏ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1 <= ùëõ <= 20000, 0 <= ùëö <= 100000). –°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç
//  –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ—Ä –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ. –†–µ–±—Ä–æ –Ω–æ–º–µ—Ä i –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç—Ä–µ–º—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
//  bùëñ, eùëñ –∏ wùëñ ‚Äî –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ü–æ–≤ —Ä–µ–±—Ä–∞ –∏ –µ–≥–æ –≤–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1 <= bùëñ, eùëñ <= n, 0 <= wùëñ <= 100000).
//  –ì—Ä–∞—Ñ —è–≤–ª—è–µ—Ç—Å—è —Å–≤—è–∑–Ω—ã–º.
//  –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
//  –í—ã–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ - –≤–µ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞

#include <fstream>
#include <vector>
#include <set>
#include <limits.h>

//  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Ä—à–∏–Ω—ã —Ä–∞—Ñ–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∫–ª—é—á - –≤–µ—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–Ω–æ–≥–æ –µ–π –∏ "–≤–µ–¥—É—â–µ–≥–æ –∫ –Ω–µ–π" –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–±—Ä–∞
//  –≤ —Ç–µ–∫—É—â–µ–º –æ—Å—Ç–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ –∏ —Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω—ã—Ö –µ–π –≤–µ—Ä—à–∏–Ω.
struct CVertex
{
    int number;
    int key;
    std::vector<std::pair<CVertex*, int>> neighbours;
    
    CVertex(): number( 0 ), key( INT_MAX )  {}
    CVertex( int _number ): number( _number ), key( INT_MAX ) {}
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç set<CVertex> queue.
    bool operator<( const CVertex& other ) const
    {
        if( key == other.key ) {
            return number < other.number;
        } else {
            return key < other.key;
        }
    }
};

//  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è set<Cvertex> numbers
struct Comp
{
    bool operator()( CVertex a, CVertex b )
    {
        return a.number < b.number;
    }
};

//  –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∞–ª–≥–æ—Ä–∏—Ç–º –ü—Ä–∏–º–∞ –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ, –∫–æ—Ç–æ—Ä—ã–π
//  –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–∫ –≤–µ–∫—Ç–æ—Ä –≤–µ—Ä—à–∏–Ω.
int Prim( std::vector<CVertex>& vertices );

int main()
{
    int n,m;
    std::ifstream fin( "kruskal.in" );
    fin >> n >> m;
    // –í–µ–∫—Ç–æ—Ä –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞.
    std::vector<CVertex> vertices;
    for( int i = 0; i < n; ++i ) {
        CVertex temp( i + 1 );
        vertices.push_back( temp );
    }
    
    int a, b, w;
    for( int i = 0; i < m; ++i ) {
        fin >> a >> b >> w;
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä—à–∏–Ω.
        vertices[a - 1].neighbours.push_back( std::make_pair( &vertices[b - 1], w ) );
        vertices[b - 1].neighbours.push_back( std::make_pair( &vertices[a - 1], w ) );
    }
    fin.close();
    
    std::ofstream fout( "kruskal.out" );
    fout << Prim( vertices );
    fout.close();
    return 0;
}

int Prim( std::vector<CVertex>& vertices )
{
    // –°–µ—Ç, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ä–æ–ª—å –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ–æ–º.
    std::set<CVertex> queue;
    // –°–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –ª–µ–∂–∏—Ç –ª–∏ –¥–∞–Ω–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ queue (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Comp).
    std::set<CVertex, Comp> numbers;
    // –°—Ç–∞–≤–∏–º –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—à–∏–Ω—ã –∫–ª—é—á –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –∏ —Å–µ—Ç –≤–µ—Ä—à–∏–Ω–∞–º–∏.
    vertices[0].key = 0;
    for( int i = 0; i < vertices.size(); ++i ) {
        queue.insert( vertices[i] );
        numbers.insert( vertices[i] );
    }
    // –ü–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç–æ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–µ–µ –≤–µ—Ä—à–∏–Ω—É —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–ª—é—á–æ–º –∏ —Ä–µ–ª–∞–∫—Å–∏—Ä—É–µ–º
    // –∫–∞–∂–¥–æ–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–Ω–æ–µ –µ–π —Ä–µ–±—Ä–æ, –µ—Å–ª–∏ –æ–Ω–æ –≤–µ–¥–µ—Ç –∫ –≤–µ—Ä—à–∏–Ω–µ, –≤—Å–µ –µ—â–µ –ª–µ–∂–∞—â–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏.
    while( !queue.empty() ) {
        CVertex u = *queue.begin();
        queue.erase( u );
        numbers.erase( u );
        for( auto edge: u.neighbours ) {
            if( numbers.find( *edge.first ) != numbers.end() && edge.first->key > edge.second ) {
                CVertex* v = edge.first;
                queue.erase( *v );
                numbers.erase( *v );
                v->key = edge.second;
                queue.insert( *v );
                numbers.insert( *v );
            }
        }
    }
    
    // –°—É–º–º–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤—Å–µ—Ö –≤–µ—Ä—à–∏–Ω - —ç—Ç–æ –∏ –µ—Å—Ç—å –≤–µ—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ MST.
    int cnt = 0;
    for( int i = 0; i < vertices.size(); ++i ) {
        cnt += vertices[i].key;
    }
    
    return cnt;
    
}




